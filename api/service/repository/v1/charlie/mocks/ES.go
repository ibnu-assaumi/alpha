// Code generated by mockery v1.0.0. DO NOT EDIT.

package mocks

import charlie "github.com/Bhinneka/alpha/api/service/domain/v1/charlie"
import context "context"
import elastic "github.com/olivere/elastic/v7"
import mock "github.com/stretchr/testify/mock"

// ES is an autogenerated mock type for the ES type
type ES struct {
	mock.Mock
}

// GetCharlie provides a mock function with given fields: ctx, client, param
func (_m *ES) GetCharlie(ctx context.Context, client *elastic.Client, param charlie.ParamGet) ([]charlie.Domain, int64, error) {
	ret := _m.Called(ctx, client, param)

	var r0 []charlie.Domain
	if rf, ok := ret.Get(0).(func(context.Context, *elastic.Client, charlie.ParamGet) []charlie.Domain); ok {
		r0 = rf(ctx, client, param)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]charlie.Domain)
		}
	}

	var r1 int64
	if rf, ok := ret.Get(1).(func(context.Context, *elastic.Client, charlie.ParamGet) int64); ok {
		r1 = rf(ctx, client, param)
	} else {
		r1 = ret.Get(1).(int64)
	}

	var r2 error
	if rf, ok := ret.Get(2).(func(context.Context, *elastic.Client, charlie.ParamGet) error); ok {
		r2 = rf(ctx, client, param)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// UpsertCharlie provides a mock function with given fields: client, param
func (_m *ES) UpsertCharlie(client *elastic.Client, param charlie.Domain) {
	_m.Called(client, param)
}
