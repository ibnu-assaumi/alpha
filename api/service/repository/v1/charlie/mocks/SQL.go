// Code generated by mockery v1.0.0. DO NOT EDIT.

package mocks

import charlie "github.com/Bhinneka/alpha/api/service/domain/v1/charlie"
import context "context"
import gorm "github.com/jinzhu/gorm"
import mock "github.com/stretchr/testify/mock"

// SQL is an autogenerated mock type for the SQL type
type SQL struct {
	mock.Mock
}

// DeleteCharlie provides a mock function with given fields: ctx, db, param
func (_m *SQL) DeleteCharlie(ctx context.Context, db *gorm.DB, param charlie.Domain) (charlie.Domain, error) {
	ret := _m.Called(ctx, db, param)

	var r0 charlie.Domain
	if rf, ok := ret.Get(0).(func(context.Context, *gorm.DB, charlie.Domain) charlie.Domain); ok {
		r0 = rf(ctx, db, param)
	} else {
		r0 = ret.Get(0).(charlie.Domain)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *gorm.DB, charlie.Domain) error); ok {
		r1 = rf(ctx, db, param)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetDataCharlie provides a mock function with given fields: ctx, db, param
func (_m *SQL) GetDataCharlie(ctx context.Context, db *gorm.DB, param charlie.ParamGet) ([]charlie.Domain, error) {
	ret := _m.Called(ctx, db, param)

	var r0 []charlie.Domain
	if rf, ok := ret.Get(0).(func(context.Context, *gorm.DB, charlie.ParamGet) []charlie.Domain); ok {
		r0 = rf(ctx, db, param)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]charlie.Domain)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *gorm.DB, charlie.ParamGet) error); ok {
		r1 = rf(ctx, db, param)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetTotalDataCharlie provides a mock function with given fields: ctx, db, param
func (_m *SQL) GetTotalDataCharlie(ctx context.Context, db *gorm.DB, param charlie.ParamGet) (int, error) {
	ret := _m.Called(ctx, db, param)

	var r0 int
	if rf, ok := ret.Get(0).(func(context.Context, *gorm.DB, charlie.ParamGet) int); ok {
		r0 = rf(ctx, db, param)
	} else {
		r0 = ret.Get(0).(int)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *gorm.DB, charlie.ParamGet) error); ok {
		r1 = rf(ctx, db, param)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// InsertCharlie provides a mock function with given fields: ctx, db, param
func (_m *SQL) InsertCharlie(ctx context.Context, db *gorm.DB, param charlie.Domain) (charlie.Domain, error) {
	ret := _m.Called(ctx, db, param)

	var r0 charlie.Domain
	if rf, ok := ret.Get(0).(func(context.Context, *gorm.DB, charlie.Domain) charlie.Domain); ok {
		r0 = rf(ctx, db, param)
	} else {
		r0 = ret.Get(0).(charlie.Domain)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *gorm.DB, charlie.Domain) error); ok {
		r1 = rf(ctx, db, param)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// IsExistsCharlie provides a mock function with given fields: ctx, db, param
func (_m *SQL) IsExistsCharlie(ctx context.Context, db *gorm.DB, param charlie.Domain) (bool, error) {
	ret := _m.Called(ctx, db, param)

	var r0 bool
	if rf, ok := ret.Get(0).(func(context.Context, *gorm.DB, charlie.Domain) bool); ok {
		r0 = rf(ctx, db, param)
	} else {
		r0 = ret.Get(0).(bool)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *gorm.DB, charlie.Domain) error); ok {
		r1 = rf(ctx, db, param)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UpdateCharlie provides a mock function with given fields: ctx, db, param
func (_m *SQL) UpdateCharlie(ctx context.Context, db *gorm.DB, param charlie.Domain) (charlie.Domain, error) {
	ret := _m.Called(ctx, db, param)

	var r0 charlie.Domain
	if rf, ok := ret.Get(0).(func(context.Context, *gorm.DB, charlie.Domain) charlie.Domain); ok {
		r0 = rf(ctx, db, param)
	} else {
		r0 = ret.Get(0).(charlie.Domain)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *gorm.DB, charlie.Domain) error); ok {
		r1 = rf(ctx, db, param)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}
